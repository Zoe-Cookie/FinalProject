Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/25/23 11:07:27
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				fileOpen PROTO
				fileWrite PROTO
				fileRaed PROTO
				getScore PROTO
				startScreen PROTO
				role_move1 PROTO
				role_move2 PROTO
				role_up PROTO		
				role_down PROTO
				move_obstacle PROTO
				move_obstacle2 PROTO
				move_obstacle3 PROTO


 00000000			.data
 = 00000064			Ground = 100 ;the length of ground
 00000000 00000000		outHandle HANDLE ?
 00000004 00000000		cellsWritten DWORD ?
 00000008 000B 0010		rolePos COORD <11,16>   ;initialize position of role
 0000000C 000B 0019		groundPos COORD <11,25> ;initialize position of ground
 00000010 006E 0018		obsPos COORD <110,24>	;initialize position of obstacle
 00000014 006E 0018		obsPos2 COORD <110,24>
 00000018 006E 0018		obsPos3 COORD <110,24>
 0000001C 00000000		obsCount DWORD 0
 00000020 000B 0018		obsBound COORD <11,24>
 00000024 0000 0002		startPos COORD <0,2>	;封面的字
 00000028  00000064 [		buffer BYTE Ground DUP(44h)							;character types
	    44
	   ]
 0000008C 000E 0000		attributes WORD 0Eh, 0h, Ground DUP(22h), 11h		;colors
	   00000064 [
	    0022
	   ] 0011
 0000015A E5 B0 8F E9 A6	titleStr BYTE "小馬快快跑",0
	   AC E5 BF AB E5
	   BF AB E8 B7 91
	   00
 0000016A 00000096		drawDelay DWORD 150	;to draw obstacle with a delay
 0000016E 00000000		startTime DWORD ?   ;
 00000172 005A 0001		curPos COORD <90,1>
 = 00000010			role_up_Y = 16		;用於判斷有沒有跳起來
 00000176 00000000		score DWORD ?
 0000017A 00000004		scoreSize DWORD ($-score)
 0000017E 00000001		curInfo CONSOLE_CURSOR_INFO <1, FALSE>
	   00000000
 00000186 00000008		range DWORD 8
 0000018A 00000003		range2 DWORD 3

				;file
 0000018E 00000000		CurrentScore DWORD ? 
 00000192 00000000		HighestScore DWORD 0
 00000196 54 68 69 73 20	testMsg BYTE "This is test message."
	   69 73 20 74 65
	   73 74 20 6D 65
	   73 73 61 67 65
	   2E
 000001AB 00000015		testSize DWORD ($-testMsg)
 000001AF 00			line BYTE ?
 000001B0 00000000		lineSize DWORD ?
 000001B4 43 61 6E 6E 6F	errMsg BYTE "Cannot create file",0dh,0ah,0
	   74 20 63 72 65
	   61 74 65 20 66
	   69 6C 65 0D 0A
	   00
 000001C9 53 63 6F 72 65	filename BYTE "Score.txt",0
	   2E 74 78 74 00
 000001D3 00000000		fileHandle DWORD ? ; handle to output file
 000001D7 00000000		bytesWritten DWORD ? ; number of bytes written
 000001DB 00000000		bytesRead DWORD ? ; number of bytes read

				;小馬顏色
 000001DF  00000006 [		attribute1 WORD 6 DUP(0h), 66h, 0h, 66h, 0h
	    0000
	   ] 0066 0000
	   0066 0000
 000001F3  00000006 [		attribute2 WORD 6 DUP(0h), 66h, 2 DUP(88h), 0h
	    0000
	   ] 0066
	   00000002 [
	    0088
	   ] 0000
 00000207  00000005 [		attribute3 WORD 5 DUP(0h), 88h, 11h, 66h, 11h, 0h
	    0000
	   ] 0088 0011
	   0066 0011 0000
 0000021B  00000005 [		attribute4 WORD 5 DUP(0h), 66h, 4 DUP(66h)
	    0000
	   ] 0066
	   00000004 [
	    0066
	   ]
 0000022F 0088			attribute5 WORD 88h, 4 DUP(0h), 88h,  2 DUP(66h), 2 DUP(0h)
	   00000004 [
	    0000
	   ] 0088
	   00000002 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 00000243  00000002 [		attribute6 WORD 2 DUP(88h), 6 DUP(66h), 2 DUP(0h)
	    0088
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 00000257  00000002 [		attribute7 WORD 2 DUP(0h), 7 DUP(66h), 0h
	    0000
	   ]
	   00000007 [
	    0066
	   ] 0000
 0000026B  00000002 [		attribute8 WORD 2 DUP(0h), 66h, 3 DUP(0h), 66h, 0h, 77h, 0h
	    0000
	   ] 0066
	   00000003 [
	    0000
	   ] 0066 0000
	   0077 0000
 0000027F  00000002 [		attribute9 WORD 2 DUP(0h), 77h, 3 DUP(0h), 77h, 3 DUP(0h)
	    0000
	   ] 0077
	   00000003 [
	    0000
	   ] 0077
	   00000003 [
	    0000
	   ]
				;跑起來的小馬顏色
 00000293  00000005 [		attributeD WORD 5 DUP(0h), 88h,  2 DUP(66h), 2 DUP(0h)
	    0000
	   ] 0088
	   00000002 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 000002A7  00000002 [		attributeE WORD 2 DUP(88h), 6 DUP(66h), 2 DUP(0h)
	    0088
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 000002BB  00000002 [		attributeF WORD 2 DUP(0h), 6 DUP(66h), 2 DUP(0h)
	    0000
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 000002CF 0000 0077 0066	attributeG WORD 0h, 77h, 66h, 4 DUP(0h), 66h, 2 DUP(0h)
	   00000004 [
	    0000
	   ] 0066
	   00000002 [
	    0000
	   ]
 000002E3  00000003 [		attributeH WORD 3 DUP(0h), 4 DUP(0h), 77h, 2 DUP(0h)
	    0000
	   ]
	   00000004 [
	    0000
	   ] 0077
	   00000002 [
	    0000
	   ]
				;覆蓋小馬顏色
 000002F7  0000000A [		attribute_black WORD 10 DUP(0h)
	    0000
	   ]

				;障礙物顏色
 0000030B  00000003 [		attribute WORD 3 DUP(44h)
	    0044
	   ]
 00000311 0044 0011 0022	attribute0 WORD 44h, 11h, 22h, 33h, 55h, 66h, 77h, 88h
	   0033 0055 0066
	   0077 0088

				;Running 75個
 00000321  0000000A [		attributeI WORD 10 DUP(0h), 7 DUP(11h)  
	    0000
	   ]
	   00000007 [
	    0011
	   ]
 00000343  00000024 [				   WORD 36 DUP(0h), 2 DUP(11h), 19 DUP(0h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000013 [
	    0000
	   ]
 000003B5  0000000A [		attributeJ WORD 10 DUP(0h), 2 DUP(11h), 5 DUP(0h), 2 DUP(11h), 51 DUP(0h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000033 [
	    0000
	   ]
 00000441  0000000A [		attributeK WORD 10 DUP(0h), 7 DUP(11h)
	    0000
	   ]
	   00000007 [
	    0011
	   ]
 00000463  00000005 [				   WORD 5 DUP(0h), 2 DUP(11h), 3 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000047B  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 0000048F  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 000004A3  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000004AF  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 000004BF  00000006 [				   WORD 6 DUP(0h), 4 DUP(11h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
 000004D3  0000000A [		attributeL WORD 10 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h) 
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000004F7  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 3 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000050D  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000525  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000539  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000541  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000555  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000569  0000000A [		attributeM WORD 10 DUP(0h), 2 DUP(11h), 6 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000006 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000591  00000004 [				   WORD 4 DUP(0h), 3 DUP(11h), 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000003 [
	    0011
	   ]
	   00000002 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005A7  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005BB  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005CF  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005D7  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005EB  00000004 [				   WORD 4 DUP(0h), 4 DUP(11h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
 000005FB  00000049 [		attributeN WORD 73 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000691  00000043 [		attributeO WORD 67 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000727  00000045 [		attributeP WORD 69 DUP(0h), 4 DUP(11h), 2 DUP(0h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
	   00000002 [
	    0000
	   ]

				;H0URSE 101格
 000007BD  0000002B [		attributeQ WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000823  00000004 [				   WORD 4 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000833  00000004 [				   WORD 4 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 0000084D  00000002 [				   WORD 2 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 0000085F  00000006 [				   WORD 6 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000873  00000003 [				   WORD 3 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 00000887  0000002B [		attributeR WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000008ED  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000901  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000917  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 0000092D  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000935  00000007 [				   WORD 7 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000947  0000002B [		attributeT WORD 43 DUP(0h), 8 DUP(44h)
	    0000
	   ]
	   00000008 [
	    0044
	   ]
 000009AD  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000009C1  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000009D7  00000002 [				   WORD 2 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 000009E9  00000006 [				   WORD 6 DUP(0h), 3 DUP(44h)
	    0000
	   ]
	   00000003 [
	    0044
	   ]
 000009FB  00000004 [				   WORD 4 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 00000A11  0000002B [		attributeU WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A77  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A8B  00000003 [				   WORD 3 DUP(0h), 2 DUP(44h), 3 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A9F  00000003 [				   WORD 3 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000AB5  00000008 [				   WORD 8 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000AC9  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000AD1  0000002B [		attributeV WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000B37  00000004 [				   WORD 4 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000B47  00000007 [				   WORD 7 DUP(0h), 3 DUP(44h)
	    0000
	   ]
	   00000003 [
	    0044
	   ]
 00000B5B  00000005 [				   WORD 5 DUP(0h), 2 DUP(44h), 6 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000006 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000B79  00000002 [				   WORD 2 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000B85  00000004 [				   WORD 4 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]

 00000000			.code
 00000000			main PROC
					;set console title
					INVOKE SetConsoleTitle, ADDR titleStr
					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000000 R		mov outHandle, eax	; save console handle

					;將cursor設為invisible比較美觀
					INVOKE SetConsoleCursorInfo, 
						outHandle, 
						ADDR curInfo
					;開始畫面
 00000026  E8 000006BD			call startScreen

 0000002B  E8 000005C0			call fileOpen 

 00000030			Start_again:
					;讀取最高分數並印出"Highest: HighestScore" 
 00000030  66| C7 05			mov curPos.X, 90
	   00000172 R
	   005A
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
 0000004A  E8 0000060A			call fileRead
					mWrite "Highest: "
 00000B9B		     1		.data		
 00000B9B 48 69 67 68 65     1		??0000 BYTE "Highest: ",0	
	   73 74 3A 20 00
 0000004F		     1		.code
 0000004F  52		     1		push	edx
 00000050  BA 00000B9B R     1		mov	edx,OFFSET ??0000
 00000055  E8 00000000 E     1		call	WriteString
 0000005A  5A		     1		pop	edx
 0000005B  A1 00000192 R		mov eax, HighestScore
 00000060  E8 00000000 E		call WriteDec
 00000065  66| 83 05			add curPos.X,14
	   00000172 R 0E

					;角色位置重置
 0000006D  66| C7 05			mov rolePos.X, 11
	   00000008 R
	   000B
 00000076  66| C7 05			mov rolePos.Y, 16
	   0000000A R
	   0010

					; Set the role to (11,16):
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 000000B9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000000FA  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000013B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000017C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000001BD  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000001FE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000023F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000280  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000002C1  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 000002C8  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					;draw the ground
					INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attributes+4, 
							Ground, 
							groundPos, 
							ADDR cellsWritten
					; Write character codes to "D"
					INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							Ground, 
							groundPos, 
							ADDR cellsWritten
 0000030A  C7 05 0000016A R		mov drawDelay, 150	;重新設定速度
	   00000096
 00000314  66| C7 05			mov curPos.X, 104	;重新開始分數的位置才不會跑掉
	   00000172 R
	   0068
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
					mWrite "Score:"
 00000BA5		     1		.data		
 00000BA5 53 63 6F 72 65     1		??0001 BYTE "Score:",0	
	   3A 00
 0000032E		     1		.code
 0000032E  52		     1		push	edx
 0000032F  BA 00000BA5 R     1		mov	edx,OFFSET ??0001
 00000334  E8 00000000 E     1		call	WriteString
 00000339  5A		     1		pop	edx
					;得到開始時間
					INVOKE GetTickCount ; get starting tick count
 0000033F  A3 0000016E R		mov startTime,eax ; save it
					;顯示零
 00000344  66| 83 05			add curPos.X, 7
	   00000172 R 07
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
 0000035D  B8 00000000			mov eax,0
 00000362  E8 00000000 E		call WriteDec ; display it

					

					
				;Start moving	
 00000367			PLAY:
					

					;用ReadKey可以不用等待讀取輸入，但輸入不限於空白鍵
 00000367  E8 00000000 E		call ReadKey	;按的鍵好像會存到al中
 0000036C  3C 20		    cmp al, 20h     ;用 ASCII 空格字符的碼檢查是否為非空白字符
 0000036E  75 0F		    jne  spaceNotPressed ;space not pressed
					;不可連續跳兩下
					.IF rolePos.Y == 16
 0000037A  E8 0000129F				call role_up
					.ENDIF

 0000037F			spaceNotPressed:
					;印出分數
					INVOKE getScore
					;use delay to let obstacle look moving
					INVOKE Sleep, drawDelay		
					;如果角色跳起來，就讓他往下 
					;若現在Y座標小於一開始的位置，呼叫role_down
					.IF rolePos.Y < role_up_Y
 00000399  E8 0000172A				call role_down
					.ENDIF

					;讓小馬跑起來
					.IF rolePos.Y == 16
 000003A8  E8 0000092B				call role_move1
						invoke Sleep, 50
 000003B4  E8 00000DC2				call role_move2
					.ENDIF

 000003B9  33 D2			xor edx, edx
 000003BB  A1 00000176 R		mov eax, score
 000003C0  BB 00000007			mov ebx, 7
 000003C5  F7 F3			div ebx
					.IF edx == 0
 000003CB  E8 00000000 E			call Randomize ;初始化
 000003D0  E8 00000000 E			call Random32 ;生成隨機正整數到eax
 000003D5  33 D2				xor edx, edx ;餘數歸零
 000003D7  F7 35 0000018A R			div range2 ;0到2隨機數
 000003DD  89 15 0000001C R			mov obsCount, edx
					.ENDIF
					
 000003E3  E8 00001B8A			call move_obstacle
					.IF obsCount == 1
						.IF obsPos.X == 74
							.IF obsPos2.X == 110
 00000405  E8 00001E25						call move_obstacle2
							.ENDIF
						.ENDIF
					.ENDIF
					.IF obsPos2.X != 110
 00000414  E8 00001E16				call move_obstacle2
					.ENDIF
					.IF obsCount == 2
						.IF obsPos.X == 74
							.IF obsPos2.X == 110
 00000436  E8 00001DF4						call move_obstacle2
							.ENDIF
						.ENDIF
						.IF obsPos2.X == 74
							.IF obsPos3.X == 110
 0000044F  E8 00002098						call move_obstacle3
							.ENDIF
						.ENDIF
					.ENDIF
					.IF obsPos3.X != 110
 0000045E  E8 00002089				call move_obstacle3
					.ENDIF


 00000463  66| A1			mov ax,rolePos.X
	   00000008 R
 00000469  66| 83 C0 05			add ax, 5
					;if obstacle and role in the same position, stop moving
					.IF obsPos.X <= ax && rolePos.Y >= 13
 00000480  EB 2F				jmp END_PLAY
						
					.ENDIF
					.IF obsPos2.X <= ax && rolePos.Y >= 13
 00000495  EB 1A				jmp END_PLAY
						
					.ENDIF
					.IF obsPos3.X <= ax && rolePos.Y >= 13
 000004AA  EB 05				jmp END_PLAY
						
					.ENDIF

 000004AC  E9 FFFFFEB6			jmp PLAY
 000004B1			END_PLAY:
 000004B1  B8 000001F4			mov  eax,500 ;delay 1 sec
 000004B6  E8 00000000 E	    call Delay
 000004BB  E8 00000000 E		call Clrscr
					INVOKE Sleep, 1000
 000004CA  66| C7 05			mov startPos.Y, 15 
	   00000026 R
	   000F
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Game Over"
 00000BAC		     1		.data		
 00000BAC 47 61 6D 65 20     1		??0002 BYTE "Game Over",0	
	   4F 76 65 72 00
 000004E4		     1		.code
 000004E4  52		     1		push	edx
 000004E5  BA 00000BAC R     1		mov	edx,OFFSET ??0002
 000004EA  E8 00000000 E     1		call	WriteString
 000004EF  5A		     1		pop	edx
 000004F0  66| FF 05			inc startPos.Y
	   00000026 R
					INVOKE Sleep, 1000
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Your score is "
 00000BB6		     1		.data		
 00000BB6 59 6F 75 72 20     1		??0003 BYTE "Your score is ",0	
	   73 63 6F 72 65
	   20 69 73 20 00
 00000512		     1		.code
 00000512  52		     1		push	edx
 00000513  BA 00000BB6 R     1		mov	edx,OFFSET ??0003
 00000518  E8 00000000 E     1		call	WriteString
 0000051D  5A		     1		pop	edx
 0000051E  A1 00000176 R		mov eax, score
 00000523  E8 00000000 E		call WriteDec
 00000528  E8 0000012C			call fileRead	;讀最高值
					;如果這次比較高，就寫進檔案裡
 0000052D  A1 00000176 R		mov  eax, score
					.IF eax > HighestScore
 0000053A  A3 00000192 R			mov HighestScore, eax
 0000053F  E8 000000E6				call fileWrite
						INVOKE Sleep, 1000
 0000054E  66| FF 05				inc startPos.Y
	   00000026 R
						INVOKE SetConsoleCursorPosition,  
							outHandle, 
							startPos
						
						mWrite "New record! Congratualation!"
 00000BC5		     1		.data		
 00000BC5 4E 65 77 20 72     1		??0004 BYTE "New record! Congratualation!",0	
	   65 63 6F 72 64
	   21 20 43 6F 6E
	   67 72 61 74 75
	   61 6C 61 74 69
	   6F 6E 21 00
 00000566		     1		.code
 00000566  52		     1		push	edx
 00000567  BA 00000BC5 R     1		mov	edx,OFFSET ??0004
 0000056C  E8 00000000 E     1		call	WriteString
 00000571  5A		     1		pop	edx
						
						
					.ENDIF

					INVOKE Sleep, 1000
 0000057C  66| FF 05			inc startPos.Y
	   00000026 R
					INVOKE SetConsoleCursorPosition,  
						outHandle, 
						startPos
					mWrite "Press ""r"" to play again or ""Esc"" to leave"	
 00000BE2		     1		.data		
 00000BE2 50 72 65 73 73     1		??0005 BYTE "Press ""r"" to play again or ""Esc"" to leave",0	
	   20 22 72 22 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 6F
	   72 20 22 45 73
	   63 22 20 74 6F
	   20 6C 65 61 76
	   65 00
 00000594		     1		.code
 00000594  52		     1		push	edx
 00000595  BA 00000BE2 R     1		mov	edx,OFFSET ??0005
 0000059A  E8 00000000 E     1		call	WriteString
 0000059F  5A		     1		pop	edx
 000005A0  66| C7 05			mov obsPos.X, 110 ;障礙物位置重置
	   00000010 R
	   006E
 000005A9  66| C7 05			mov obsPos2.X, 110 
	   00000014 R
	   006E
 000005B2  66| C7 05			mov obsPos3.X, 110 
	   00000018 R
	   006E

 000005BB			Readchar_again:
 000005BB  E8 00000000 E		call Readchar
					.IF ax == 1372h || ax == 1352h;按r再玩一次
 000005CC  E8 00000000 E			call Clrscr
 000005D1  66| C7 05				mov obsPos.X, 110
	   00000010 R
	   006E
 000005DA  E9 FFFFFA51				jmp Start_again
					.ENDIF
					.IF ax == 011bh;按esc離開遊戲
 000005E5  EB 02				jmp EndMain
					.ENDIF
 000005E7  EB D2			jmp Readchar_again
					
 000005E9			EndMain:
					
					exit
 000005F0			main ENDP

 000005F0			fileOpen PROC
					;開寫檔，每次開會指向最前面
					INVOKE CreateFile,
						ADDR filename, 
						GENERIC_WRITE OR GENERIC_READ, 
						DO_NOT_SHARE, 
						NULL,
						OPEN_EXISTING, 
						FILE_ATTRIBUTE_NORMAL, 
						0
 0000060C  A3 000001D3 R		mov fileHandle,eax ; save file handle
					.IF eax == INVALID_HANDLE_VALUE
 00000616  BA 000001B4 R			mov edx,OFFSET errMsg ; Display error message
 0000061B  E8 00000000 E			call WriteString
 00000620  EB 01				jmp QuitNow
					.ENDIF
 00000622  C3				ret
 00000623			QuitNow:
					exit
 0000062A			fileOpen ENDP

 0000062A			fileWrite PROC
					;指向文件開頭
					INVOKE SetFilePointer,
						fileHandle,0,0,FILE_BEGIN
					;寫檔
					INVOKE WriteFile, ; write text to file
						fileHandle, ; file handle
						ADDR Highestscore, ; buffer pointer
						scoreSize, ; number of bytes to write
						ADDR bytesWritten, ; number of bytes written
						0 ; overlapped execution flag
 00000658  C3				ret
 00000659			fileWrite ENDP

 00000659			fileRead PROC
					;指向文件開頭
					INVOKE SetFilePointer,
						fileHandle,0,0,FILE_BEGIN
					INVOKE ReadFile,
						fileHandle,		; handle to file
						ADDR HighestScore,			; ptr to buffer
						scoreSize,		; num bytes to read
						ADDR bytesRead,		; bytes actually read
						NULL			; NULL (0) for syn mode	
					
 00000687  C3				ret
 00000688			fileRead ENDP

 00000688			getScore PROC, 
					;用經過的milliseconds當作分數
					;讓數字從相同地方印出
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
					INVOKE GetTickCount ; get new tick count
 0000069E  3B 05 0000016E R		cmp eax,startTime	; lower than starting one
 000006A4  72 35			jb errorTime
 000006A6  2B 05 0000016E R		sub eax,startTime	; get elapsed milliseconds
					;除以1000讓數字變小
 000006AC  BA 00000000			mov edx, 0h			
 000006B1  B9 000003E8			mov ecx, 03E8h
 000006B6  F7 F1			div ecx
 000006B8  E8 00000000 E		call WriteDec ; display it
 000006BD  A3 00000176 R		mov score, eax
					;15秒增加速度，到330秒極限
 000006C2  BA 00000000			mov edx, 0h
 000006C7  B9 0000000F			mov ecx, 0fh
 000006CC  F7 F1			div ecx
					.IF edx == 0
 000006D2  83 2D 0000016A R			sub drawDelay, 1
	   01
					.ENDIF

 000006D9  EB 0C			jmp quit
 000006DB			errorTime:
					mWrite "Reach Highest Goal!"
 00000C0C		     1		.data		
 00000C0C 52 65 61 63 68     1		??0006 BYTE "Reach Highest Goal!",0	
	   20 48 69 67 68
	   65 73 74 20 47
	   6F 61 6C 21 00
 000006DB		     1		.code
 000006DB  52		     1		push	edx
 000006DC  BA 00000C0C R     1		mov	edx,OFFSET ??0006
 000006E1  E8 00000000 E     1		call	WriteString
 000006E6  5A		     1		pop	edx
 000006E7			quit:
 000006E7  C3				ret
 000006E8			getScore ENDP

 000006E8			startScreen PROC
 000006E8  66| 83 05			add rolePos.X, 17
	   00000008 R 11
 000006F0  66| 83 05			add rolePos.Y, 3
	   0000000A R 03
					; Set the role to (28, 19):
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00000732  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000773  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000007B4  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000007F5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000836  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000877  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000008B8  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000008F9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000093A  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;畫出"Running"
					FORC num, <IJKLMNOP>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							75, 
							startPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							75, 
							startPos, 
							ADDR cellsWritten
						inc startPos.Y
					ENDM
 0000097B  66| FF 05	     1			inc startPos.Y
	   00000026 R
 000009BC  66| FF 05	     1			inc startPos.Y
	   00000026 R
 000009FD  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000A3E  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000A7F  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000AC0  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000B01  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000B42  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000B49  66| 83 05			add startPos.Y, 3
	   00000026 R 03
					;畫出"HOURSE"
					FORC num, <QRTUV>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							101, 
							startPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							101, 
							startPos, 
							ADDR cellsWritten
						inc startPos.Y
					ENDM
 00000B8B  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000BCC  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000C0D  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000C4E  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000C8F  66| FF 05	     1			inc startPos.Y
	   00000026 R
 00000C96  66| 83 05			add startPos.Y, 4
	   00000026 R 04
 00000C9E  66| 83 05			add startPos.X, 50
	   00000024 R 32
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Press ""space"" to start"
 00000C20		     1		.data		
 00000C20 50 72 65 73 73     1		??0007 BYTE "Press ""space"" to start",0	
	   20 22 73 70 61
	   63 65 22 20 74
	   6F 20 73 74 61
	   72 74 00
 00000CB7		     1		.code
 00000CB7  52		     1		push	edx
 00000CB8  BA 00000C20 R     1		mov	edx,OFFSET ??0007
 00000CBD  E8 00000000 E     1		call	WriteString
 00000CC2  5A		     1		pop	edx
 00000CC3			notSpace:
 00000CC3  E8 00000000 E		call Readchar
					.IF ax == 3920h
 00000CCE  E8 00000000 E			call Clrscr	;clear screen
 00000CD3  EB 02				jmp startGame
					.ENDIF
 00000CD5  EB EC			jmp notSpace
 00000CD7			startGame:
 00000CD7  C3				ret
 00000CD8			startScreen ENDP

 00000CD8			role_move1 PROC
				;切換馬腳的兩種動作的第一種
				;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00000D12  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000D53  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000D94  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000DD5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000E16  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000E57  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000E98  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000ED9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000F1A  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 00000F21  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					FORC num, <1234DEFGH>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00000F63  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000FA4  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000FE5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001026  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001067  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000010A8  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000010E9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000112A  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000116B  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00001172  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 0000117A  C3				ret
 0000117B			role_move1 ENDP

 0000117B			role_move2 PROC
				;切換馬腳的兩種動作的第二種
				;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 000011B5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000011F6  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001237  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001278  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000012B9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000012FA  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000133B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000137C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000013BD  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 000013C4  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001406  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001447  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001488  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000014C9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000150A  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000154B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000158C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000015CD  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000160E  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00001615  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 0000161D  C3				ret
 0000161E			role_move2 ENDP

 0000161E			role_up PROC
				;向上7格
					;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001658  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001699  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000016DA  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000171B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000175C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000179D  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000017DE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000181F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001860  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 00001867  66| 83 2D			sub rolePos.Y, 15
	   0000000A R 0F
 0000186F  66| FF 0D			dec rolePos.Y
	   0000000A R

					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 000018B0  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000018F1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001932  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001973  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000019B4  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000019F5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001A36  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001A77  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001AB8  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00001ABF  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001AC7  C3				ret
 00001AC8			role_up ENDP

 00001AC8			role_down PROC
				;向下一格
					;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001B02  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001B43  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001B84  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001BC5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001C06  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001C47  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001C88  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001CC9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001D0A  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 00001D11  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001D19  66| FF 05			inc rolePos.Y
	   0000000A R
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001D5A  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001D9B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001DDC  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001E1D  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001E5E  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001E9F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001EE0  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001F21  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001F62  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00001F69  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001F71  C3				ret
 00001F72			role_down ENDP

 00001F72			move_obstacle PROC
					;draw obstacle with color red
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y			;每次畫一列，往上畫
					ENDM
 00001FAC  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
 00001FED  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
 0000202E  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
					;back to previous position Y回到第一列，X倒退三行
 00002035  66| 83 05			add obsPos.X, 3
	   00000010 R 03
 0000203D  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					;erase obstacle 
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y
					ENDM
 0000207F  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 000020C0  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 00002101  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
					;to the next position Y回到第一列，X前進六行
 00002108  66| 83 2D			sub obsPos.X, 6
	   00000010 R 06
 00002110  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					;若障礙物到達末端，從頭開始
					.IF obsPos.X == 5
 00002126  66| 83 05				add obsPos.X, 3
	   00000010 R 03
						FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y
					ENDM
 00002168  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 000021A9  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 000021EA  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
					;生成隨機顏色
 000021F1  E8 00000000 E			call Randomize ;初始化
 000021F6  E8 00000000 E			call Random32 ;生成隨機正整數到eax
 000021FB  33 D2				xor edx, edx ;餘數歸零
 000021FD  F7 35 00000186 R			div range ;0到7隨機數
 00002203  66| 8B 04 55				mov ax, attribute0[edx*2] ; 根據隨機數選擇對應的顏色
	   00000311 R
						FORC num, <024>
							mov attribute[&num], ax ; 設定顏色
						ENDM
 0000220B  66| A3	     1				mov attribute[0], ax ; 設定顏色
	   0000030B R
 00002211  66| A3	     1				mov attribute[2], ax ; 設定顏色
	   0000030D R
 00002217  66| A3	     1				mov attribute[4], ax ; 設定顏色
	   0000030F R
 0000221D  66| C7 05			mov obsPos.X, 110 
	   00000010 R
	   006E
 00002226  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					.ENDIF
 0000222E  C3				ret
 0000222F			move_obstacle ENDP

 0000222F			move_obstacle2 PROC
					;draw obstacle with color red
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						dec obsPos2.Y			;每次畫一列，往上畫
					ENDM
 00002269  66| FF 0D	     1			dec obsPos2.Y			;每次畫一列，往上畫
	   00000016 R
 000022AA  66| FF 0D	     1			dec obsPos2.Y			;每次畫一列，往上畫
	   00000016 R
 000022EB  66| FF 0D	     1			dec obsPos2.Y			;每次畫一列，往上畫
	   00000016 R
					;back to previous position Y回到第一列，X倒退三行
 000022F2  66| 83 05			add obsPos2.X, 3
	   00000014 R 03
 000022FA  66| 83 05			add obsPos2.Y, 3
	   00000016 R 03
					;erase obstacle 
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						dec obsPos2.Y
					ENDM
 0000233C  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
 0000237D  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
 000023BE  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
					;to the next position Y回到第一列，X前進六行
 000023C5  66| 83 2D			sub obsPos2.X, 6
	   00000014 R 06
 000023CD  66| 83 05			add obsPos2.Y, 3
	   00000016 R 03
					;若障礙物到達末端，從頭開始
					.IF obsPos2.X == 5
 000023E3  66| 83 05				add obsPos2.X, 3
	   00000014 R 03
						FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos2, 
							ADDR cellsWritten
						dec obsPos2.Y
					ENDM
 00002425  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
 00002466  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
 000024A7  66| FF 0D	     1			dec obsPos2.Y
	   00000016 R
					;生成隨機顏色
 000024AE  E8 00000000 E			call Randomize ;初始化
 000024B3  E8 00000000 E			call Random32 ;生成隨機正整數到eax
 000024B8  33 D2				xor edx, edx ;餘數歸零
 000024BA  F7 35 00000186 R			div range ;0到7隨機數
 000024C0  66| 8B 04 55				mov ax, attribute0[edx*2] ; 根據隨機數選擇對應的顏色
	   00000311 R
						FORC num, <024>
							mov attribute[&num], ax ; 設定顏色
						ENDM
 000024C8  66| A3	     1				mov attribute[0], ax ; 設定顏色
	   0000030B R
 000024CE  66| A3	     1				mov attribute[2], ax ; 設定顏色
	   0000030D R
 000024D4  66| A3	     1				mov attribute[4], ax ; 設定顏色
	   0000030F R
 000024DA  66| C7 05			mov obsPos2.X, 110 
	   00000014 R
	   006E
 000024E3  66| 83 05			add obsPos2.Y, 3
	   00000016 R 03
					.ENDIF
 000024EB  C3				ret
 000024EC			move_obstacle2 ENDP

 000024EC			move_obstacle3 PROC
					;draw obstacle with color red
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						dec obsPos3.Y			;每次畫一列，往上畫
					ENDM
 00002526  66| FF 0D	     1			dec obsPos3.Y			;每次畫一列，往上畫
	   0000001A R
 00002567  66| FF 0D	     1			dec obsPos3.Y			;每次畫一列，往上畫
	   0000001A R
 000025A8  66| FF 0D	     1			dec obsPos3.Y			;每次畫一列，往上畫
	   0000001A R
					;back to previous position Y回到第一列，X倒退三行
 000025AF  66| 83 05			add obsPos3.X, 3
	   00000018 R 03
 000025B7  66| 83 05			add obsPos3.Y, 3
	   0000001A R 03
					;erase obstacle 
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						dec obsPos3.Y
					ENDM
 000025F9  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
 0000263A  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
 0000267B  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
					;to the next position Y回到第一列，X前進六行
 00002682  66| 83 2D			sub obsPos3.X, 6
	   00000018 R 06
 0000268A  66| 83 05			add obsPos3.Y, 3
	   0000001A R 03
					;若障礙物到達末端，從頭開始
					.IF obsPos3.X == 5
 000026A0  66| 83 05				add obsPos3.X, 3
	   00000018 R 03
						FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos3, 
							ADDR cellsWritten
						dec obsPos3.Y
					ENDM
 000026E2  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
 00002723  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
 00002764  66| FF 0D	     1			dec obsPos3.Y
	   0000001A R
					;生成隨機顏色
 0000276B  E8 00000000 E			call Randomize ;初始化
 00002770  E8 00000000 E			call Random32 ;生成隨機正整數到eax
 00002775  33 D2				xor edx, edx ;餘數歸零
 00002777  F7 35 00000186 R			div range ;0到7隨機數
 0000277D  66| 8B 04 55				mov ax, attribute0[edx*2] ; 根據隨機數選擇對應的顏色
	   00000311 R
						FORC num, <024>
							mov attribute[&num], ax ; 設定顏色
						ENDM
 00002785  66| A3	     1				mov attribute[0], ax ; 設定顏色
	   0000030B R
 0000278B  66| A3	     1				mov attribute[2], ax ; 設定顏色
	   0000030D R
 00002791  66| A3	     1				mov attribute[4], ax ; 設定顏色
	   0000030F R
 00002797  66| C7 05			mov obsPos3.X, 110 
	   00000018 R
	   006E
 000027A0  66| 83 05			add obsPos3.Y, 3
	   0000001A R 03
					.ENDIF
 000027A8  C3				ret
 000027A9			move_obstacle3 ENDP
				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/25/23 11:07:27
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000C37 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000027A9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileOpen . . . . . . . . . . . .	P Near	 000005F0 _TEXT	Length= 0000003A Public STDCALL
  QuitNow  . . . . . . . . . . .	L Near	 00000623 _TEXT	
fileRaed . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileRead . . . . . . . . . . . .	P Near	 00000659 _TEXT	Length= 0000002F Public STDCALL
fileWrite  . . . . . . . . . . .	P Near	 0000062A _TEXT	Length= 0000002F Public STDCALL
getScore . . . . . . . . . . . .	P Near	 00000688 _TEXT	Length= 00000060 Public STDCALL
  errorTime  . . . . . . . . . .	L Near	 000006DB _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000006E7 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000005F0 Public STDCALL
  Start_again  . . . . . . . . .	L Near	 00000030 _TEXT	
  PLAY . . . . . . . . . . . . .	L Near	 00000367 _TEXT	
  spaceNotPressed  . . . . . . .	L Near	 0000037F _TEXT	
  END_PLAY . . . . . . . . . . .	L Near	 000004B1 _TEXT	
  Readchar_again . . . . . . . .	L Near	 000005BB _TEXT	
  EndMain  . . . . . . . . . . .	L Near	 000005E9 _TEXT	
move_obstacle2 . . . . . . . . .	P Near	 0000222F _TEXT	Length= 000002BD Public STDCALL
move_obstacle3 . . . . . . . . .	P Near	 000024EC _TEXT	Length= 000002BD Public STDCALL
move_obstacle  . . . . . . . . .	P Near	 00001F72 _TEXT	Length= 000002BD Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
role_down  . . . . . . . . . . .	P Near	 00001AC8 _TEXT	Length= 000004AA Public STDCALL
role_move1 . . . . . . . . . . .	P Near	 00000CD8 _TEXT	Length= 000004A3 Public STDCALL
role_move2 . . . . . . . . . . .	P Near	 0000117B _TEXT	Length= 000004A3 Public STDCALL
role_up  . . . . . . . . . . . .	P Near	 0000161E _TEXT	Length= 000004AA Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
startScreen  . . . . . . . . . .	P Near	 000006E8 _TEXT	Length= 000005F0 Public STDCALL
  notSpace . . . . . . . . . . .	L Near	 00000CC3 _TEXT	
  startGame  . . . . . . . . . .	L Near	 00000CD7 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000B9B _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000BA5 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000BAC _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000BB6 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000BC5 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000BE2 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00000C0C _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000C20 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CurrentScore . . . . . . . . . .	DWord	 0000018E _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Ground . . . . . . . . . . . . .	Number	 00000064h   
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HighestScore . . . . . . . . . .	DWord	 00000192 _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
attribute0 . . . . . . . . . . .	Word	 00000311 _DATA	
attribute1 . . . . . . . . . . .	Word	 000001DF _DATA	
attribute2 . . . . . . . . . . .	Word	 000001F3 _DATA	
attribute3 . . . . . . . . . . .	Word	 00000207 _DATA	
attribute4 . . . . . . . . . . .	Word	 0000021B _DATA	
attribute5 . . . . . . . . . . .	Word	 0000022F _DATA	
attribute6 . . . . . . . . . . .	Word	 00000243 _DATA	
attribute7 . . . . . . . . . . .	Word	 00000257 _DATA	
attribute8 . . . . . . . . . . .	Word	 0000026B _DATA	
attribute9 . . . . . . . . . . .	Word	 0000027F _DATA	
attributeD . . . . . . . . . . .	Word	 00000293 _DATA	
attributeE . . . . . . . . . . .	Word	 000002A7 _DATA	
attributeF . . . . . . . . . . .	Word	 000002BB _DATA	
attributeG . . . . . . . . . . .	Word	 000002CF _DATA	
attributeH . . . . . . . . . . .	Word	 000002E3 _DATA	
attributeI . . . . . . . . . . .	Word	 00000321 _DATA	
attributeJ . . . . . . . . . . .	Word	 000003B5 _DATA	
attributeK . . . . . . . . . . .	Word	 00000441 _DATA	
attributeL . . . . . . . . . . .	Word	 000004D3 _DATA	
attributeM . . . . . . . . . . .	Word	 00000569 _DATA	
attributeN . . . . . . . . . . .	Word	 000005FB _DATA	
attributeO . . . . . . . . . . .	Word	 00000691 _DATA	
attributeP . . . . . . . . . . .	Word	 00000727 _DATA	
attributeQ . . . . . . . . . . .	Word	 000007BD _DATA	
attributeR . . . . . . . . . . .	Word	 00000887 _DATA	
attributeT . . . . . . . . . . .	Word	 00000947 _DATA	
attributeU . . . . . . . . . . .	Word	 00000A11 _DATA	
attributeV . . . . . . . . . . .	Word	 00000AD1 _DATA	
attribute_black  . . . . . . . .	Word	 000002F7 _DATA	
attributes . . . . . . . . . . .	Word	 0000008C _DATA	
attribute  . . . . . . . . . . .	Word	 0000030B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000028 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 000001DB _DATA	
bytesWritten . . . . . . . . . .	DWord	 000001D7 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000004 _DATA	
curInfo  . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  0000017E _DATA	
curPos . . . . . . . . . . . . .	COORD	 00000172 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
drawDelay  . . . . . . . . . . .	DWord	 0000016A _DATA	
errMsg . . . . . . . . . . . . .	Byte	 000001B4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000001D3 _DATA	
filename . . . . . . . . . . . .	Byte	 000001C9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
groundPos  . . . . . . . . . . .	COORD	 0000000C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineSize . . . . . . . . . . . .	DWord	 000001B0 _DATA	
line . . . . . . . . . . . . . .	Byte	 000001AF _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
obsBound . . . . . . . . . . . .	COORD	 00000020 _DATA	
obsCount . . . . . . . . . . . .	DWord	 0000001C _DATA	
obsPos2  . . . . . . . . . . . .	COORD	 00000014 _DATA	
obsPos3  . . . . . . . . . . . .	COORD	 00000018 _DATA	
obsPos . . . . . . . . . . . . .	COORD	 00000010 _DATA	
outHandle  . . . . . . . . . . .	DWord	 00000000 _DATA	
range2 . . . . . . . . . . . . .	DWord	 0000018A _DATA	
range  . . . . . . . . . . . . .	DWord	 00000186 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rolePos  . . . . . . . . . . . .	COORD	 00000008 _DATA	
role_up_Y  . . . . . . . . . . .	Number	 00000010h   
scoreSize  . . . . . . . . . . .	DWord	 0000017A _DATA	
score  . . . . . . . . . . . . .	DWord	 00000176 _DATA	
startPos . . . . . . . . . . . .	COORD	 00000024 _DATA	
startTime  . . . . . . . . . . .	DWord	 0000016E _DATA	
testMsg  . . . . . . . . . . . .	Byte	 00000196 _DATA	
testSize . . . . . . . . . . . .	DWord	 000001AB _DATA	
titleStr . . . . . . . . . . . .	Byte	 0000015A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
