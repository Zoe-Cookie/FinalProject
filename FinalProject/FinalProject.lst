Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/21/23 23:34:51
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				fileOpen PROTO
				fileWrite PROTO
				fileRaed PROTO
				getScore PROTO
				startScreen PROTO
				role_move1 PROTO
				role_move2 PROTO
				role_up PROTO		
				role_down PROTO
				move_obstacle PROTO


 00000000			.data
 = 00000064			Ground = 100 ;the length of ground
 00000000 00000000		outHandle HANDLE ?
 00000004 00000000		cellsWritten DWORD ?
 00000008 000B 0010		rolePos COORD <11,16>   ;initialize position of role
 0000000C 000B 0019		groundPos COORD <11,25> ;initialize position of ground
 00000010 006E 0018		obsPos COORD <110,24>	;initialize position of obstacle
 00000014 000B 0018		obsBound COORD <11,24>
 00000018 0000 0002		startPos COORD <0,2>	;封面的字
 0000001C  00000064 [		buffer BYTE Ground DUP(44h)							;character types
	    44
	   ]
 00000080 000E 0000		attributes WORD 0Eh, 0h, Ground DUP(22h), 11h		;colors
	   00000064 [
	    0022
	   ] 0011
 0000014E E5 B0 8F E9 A6	titleStr BYTE "小馬快快跑",0
	   AC E5 BF AB E5
	   BF AB E8 B7 91
	   00
 0000015E 00000096		drawDelay DWORD 150	;to draw obstacle with a delay
 00000162 00000000		startTime DWORD ?   ;
 00000166 0068 0001		curPos COORD <104,1>
 = 00000010			role_up_Y = 16		;用於判斷有沒有跳起來
 0000016A 00000000		score DWORD ?
 0000016E 00000004		scoreSize DWORD ($-score)
 00000172 00000001		curInfo CONSOLE_CURSOR_INFO <1, FALSE>
	   00000000
 0000017A 00000008		range DWORD 8

				;file
 0000017E 00000000		HighestScore DWORD ? 
 00000182 54 68 69 73 20	testMsg BYTE "This is test message."
	   69 73 20 74 65
	   73 74 20 6D 65
	   73 73 61 67 65
	   2E
 00000197 00000015		testSize DWORD ($-testMsg)
 0000019B 00			line BYTE ?
 0000019C 00000000		lineSize DWORD ?
 000001A0 43 61 6E 6E 6F	errMsg BYTE "Cannot create file",0dh,0ah,0
	   74 20 63 72 65
	   61 74 65 20 66
	   69 6C 65 0D 0A
	   00
 000001B5 53 63 6F 72 65	filename BYTE "Score.txt",0
	   2E 74 78 74 00
 000001BF 00000000		fileHandle DWORD ? ; handle to output file
 000001C3 00000000		bytesWritten DWORD ? ; number of bytes written
 000001C7 00000000		bytesRead DWORD ? ; number of bytes read

				;小馬顏色
 000001CB  00000006 [		attribute1 WORD 6 DUP(0h), 66h, 0h, 66h, 0h
	    0000
	   ] 0066 0000
	   0066 0000
 000001DF  00000006 [		attribute2 WORD 6 DUP(0h), 66h, 2 DUP(88h), 0h
	    0000
	   ] 0066
	   00000002 [
	    0088
	   ] 0000
 000001F3  00000005 [		attribute3 WORD 5 DUP(0h), 88h, 11h, 66h, 11h, 0h
	    0000
	   ] 0088 0011
	   0066 0011 0000
 00000207  00000005 [		attribute4 WORD 5 DUP(0h), 66h, 4 DUP(66h)
	    0000
	   ] 0066
	   00000004 [
	    0066
	   ]
 0000021B 0088			attribute5 WORD 88h, 4 DUP(0h), 88h,  2 DUP(66h), 2 DUP(0h)
	   00000004 [
	    0000
	   ] 0088
	   00000002 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 0000022F  00000002 [		attribute6 WORD 2 DUP(88h), 6 DUP(66h), 2 DUP(0h)
	    0088
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 00000243  00000002 [		attribute7 WORD 2 DUP(0h), 7 DUP(66h), 0h
	    0000
	   ]
	   00000007 [
	    0066
	   ] 0000
 00000257  00000002 [		attribute8 WORD 2 DUP(0h), 66h, 3 DUP(0h), 66h, 0h, 77h, 0h
	    0000
	   ] 0066
	   00000003 [
	    0000
	   ] 0066 0000
	   0077 0000
 0000026B  00000002 [		attribute9 WORD 2 DUP(0h), 77h, 3 DUP(0h), 77h, 3 DUP(0h)
	    0000
	   ] 0077
	   00000003 [
	    0000
	   ] 0077
	   00000003 [
	    0000
	   ]
				;跑起來的小馬顏色
 0000027F  00000005 [		attributeD WORD 5 DUP(0h), 88h,  2 DUP(66h), 2 DUP(0h)
	    0000
	   ] 0088
	   00000002 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 00000293  00000002 [		attributeE WORD 2 DUP(88h), 6 DUP(66h), 2 DUP(0h)
	    0088
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 000002A7  00000002 [		attributeF WORD 2 DUP(0h), 6 DUP(66h), 2 DUP(0h)
	    0000
	   ]
	   00000006 [
	    0066
	   ]
	   00000002 [
	    0000
	   ]
 000002BB 0000 0077 0066	attributeG WORD 0h, 77h, 66h, 4 DUP(0h), 66h, 2 DUP(0h)
	   00000004 [
	    0000
	   ] 0066
	   00000002 [
	    0000
	   ]
 000002CF  00000003 [		attributeH WORD 3 DUP(0h), 4 DUP(0h), 77h, 2 DUP(0h)
	    0000
	   ]
	   00000004 [
	    0000
	   ] 0077
	   00000002 [
	    0000
	   ]
				;覆蓋小馬顏色
 000002E3  0000000A [		attribute_black WORD 10 DUP(0h)
	    0000
	   ]

				;障礙物顏色
 000002F7  00000003 [		attribute WORD 3 DUP(44h)
	    0044
	   ]
 000002FD 0044 0011 0022	attribute0 WORD 44h, 11h, 22h, 33h, 55h, 66h, 77h, 88h
	   0033 0055 0066
	   0077 0088

				;Running 75個
 0000030D  0000000A [		attributeI WORD 10 DUP(0h), 7 DUP(11h)  
	    0000
	   ]
	   00000007 [
	    0011
	   ]
 0000032F  00000024 [				   WORD 36 DUP(0h), 2 DUP(11h), 19 DUP(0h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000013 [
	    0000
	   ]
 000003A1  0000000A [		attributeJ WORD 10 DUP(0h), 2 DUP(11h), 5 DUP(0h), 2 DUP(11h), 51 DUP(0h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000033 [
	    0000
	   ]
 0000042D  0000000A [		attributeK WORD 10 DUP(0h), 7 DUP(11h)
	    0000
	   ]
	   00000007 [
	    0011
	   ]
 0000044F  00000005 [				   WORD 5 DUP(0h), 2 DUP(11h), 3 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000467  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 0000047B  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 0000048F  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000049B  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 0h, 3 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ] 0000
	   00000003 [
	    0011
	   ]
 000004AB  00000006 [				   WORD 6 DUP(0h), 4 DUP(11h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
 000004BF  0000000A [		attributeL WORD 10 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h) 
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000004E3  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 3 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000004F9  00000004 [				   WORD 4 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000511  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000525  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000052D  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000541  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000555  0000000A [		attributeM WORD 10 DUP(0h), 2 DUP(11h), 6 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000006 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000057D  00000004 [				   WORD 4 DUP(0h), 3 DUP(11h), 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000003 [
	    0011
	   ]
	   00000002 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000593  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005A7  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005BB  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005C3  00000002 [				   WORD 2 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 000005D7  00000004 [				   WORD 4 DUP(0h), 4 DUP(11h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
 000005E7  00000049 [		attributeN WORD 73 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 0000067D  00000043 [		attributeO WORD 67 DUP(0h), 2 DUP(11h), 4 DUP(0h), 2 DUP(11h)
	    0000
	   ]
	   00000002 [
	    0011
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0011
	   ]
 00000713  00000045 [		attributeP WORD 69 DUP(0h), 4 DUP(11h), 2 DUP(0h)
	    0000
	   ]
	   00000004 [
	    0011
	   ]
	   00000002 [
	    0000
	   ]

				;H0URSE 101格
 000007A9  0000002B [		attributeQ WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 0000080F  00000004 [				   WORD 4 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 0000081F  00000004 [				   WORD 4 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000839  00000002 [				   WORD 2 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 0000084B  00000006 [				   WORD 6 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 0000085F  00000003 [				   WORD 3 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 00000873  0000002B [		attributeR WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000008D9  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000008ED  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000903  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000919  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000921  00000007 [		   WORD 7 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000933  0000002B [		attributeT WORD 43 DUP(0h), 8 DUP(44h)
	    0000
	   ]
	   00000008 [
	    0044
	   ]
 00000999  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000009AD  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 5 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000005 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 000009C3  00000002 [				   WORD 2 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 000009D5  00000006 [				   WORD 6 DUP(0h), 3 DUP(44h)
	    0000
	   ]
	   00000003 [
	    0044
	   ]
 000009E7  00000004 [				   WORD 4 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]
 000009FD  0000002B [		attributeU WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A63  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A77  00000003 [				   WORD 3 DUP(0h), 2 DUP(44h), 3 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000003 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000A8B  00000003 [				   WORD 3 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000AA1  00000008 [				   WORD 8 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000AB5  00000002 [				   WORD 2 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000ABD  0000002B [		attributeV WORD 43 DUP(0h), 2 DUP(44h), 4 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000004 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000B23  00000004 [				   WORD 4 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000B33  00000007 [				   WORD 7 DUP(0h), 3 DUP(44h)
	    0000
	   ]
	   00000003 [
	    0044
	   ]
 00000B47  00000005 [				   WORD 5 DUP(0h), 2 DUP(44h), 6 DUP(0h), 2 DUP(44h)
	    0000
	   ]
	   00000002 [
	    0044
	   ]
	   00000006 [
	    0000
	   ]
	   00000002 [
	    0044
	   ]
 00000B65  00000002 [				   WORD 2 DUP(0h), 4 DUP(44h)
	    0000
	   ]
	   00000004 [
	    0044
	   ]
 00000B71  00000004 [				   WORD 4 DUP(0h), 7 DUP(44h)
	    0000
	   ]
	   00000007 [
	    0044
	   ]

 00000000			.code
 00000000			main PROC
					;set console title
					INVOKE SetConsoleTitle, ADDR titleStr
					; Get the console ouput handle
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 00000000 R		mov outHandle, eax	; save console handle

					;將cursor設為invisible比較美觀
					INVOKE SetConsoleCursorInfo, 
						outHandle, 
						ADDR curInfo
					;開始畫面
 00000026  E8 00000548			call startScreen

 0000002B  E8 00000456			call fileOpen;

					;角色位置重置
 00000030  66| C7 05			mov rolePos.X, 11
	   00000008 R
	   000B
 00000039  66| C7 05			mov rolePos.Y, 16
	   0000000A R
	   0010
 00000042			Start_again:
					; Set the role to (11,16):
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 0000007C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000000BD  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000000FE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000013F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000180  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000001C1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000202  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000243  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000284  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 0000028B  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					;draw the ground
					INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attributes+4, 
							Ground, 
							groundPos, 
							ADDR cellsWritten
					; Write character codes to "D"
					INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							Ground, 
							groundPos, 
							ADDR cellsWritten
 000002CD  C7 05 0000015E R		mov drawDelay, 150	;重新設定速度
	   00000096
 000002D7  66| C7 05			mov curPos.X, 104	;重新開始分數的位置才不會跑掉
	   00000166 R
	   0068
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
					mWrite "Score:"
 00000B87		     1		.data		
 00000B87 53 63 6F 72 65     1		??0000 BYTE "Score:",0	
	   3A 00
 000002F1		     1		.code
 000002F1  52		     1		push	edx
 000002F2  BA 00000B87 R     1		mov	edx,OFFSET ??0000
 000002F7  E8 00000000 E     1		call	WriteString
 000002FC  5A		     1		pop	edx
					;得到開始時間
					INVOKE GetTickCount ; get starting tick count
 00000302  A3 00000162 R		mov startTime,eax ; save it
					;顯示零
 00000307  66| 83 05			add curPos.X, 7
	   00000166 R 07
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
 00000320  B8 00000000			mov eax,0
 00000325  E8 00000000 E		call WriteDec ; display it

					

				;要先判斷有沒有輸入	
					
				;Start moving	
 0000032A			PLAY:
					

					;用ReadKey可以不用等待讀取輸入，但輸入不限於空白鍵
 0000032A  E8 00000000 E		call ReadKey	;按的鍵好像會存到al中
 0000032F  3C 20		    cmp al, 20h     ;用 ASCII 空格字符的碼檢查是否為非空白字符
 00000331  75 0F		    jne  spaceNotPressed ;space not pressed
					;不可連續跳兩下
					.IF rolePos.Y == 16
 0000033D  E8 00001167				call role_up
					.ENDIF

 00000342			spaceNotPressed:
					;印出分數
					INVOKE getScore
					;use delay to let obstacle look moving
					INVOKE Sleep, drawDelay		
					;如果角色跳起來，就讓他往下 
					;若現在Y座標小於一開始的位置，呼叫role_down
					.IF rolePos.Y < role_up_Y
 0000035C  E8 000015F2				call role_down
					.ENDIF

					;讓小馬跑起來
					.IF rolePos.Y == 16
 0000036B  E8 000007F3				call role_move1
						invoke Sleep, 50
 00000377  E8 00000C8A				call role_move2
					.ENDIF

 0000037C  E8 00001A7C			call move_obstacle

 00000381  66| A1			mov ax,rolePos.X
	   00000008 R
 00000387  66| 83 C0 05			add ax, 5
					;if obstacle and role in the same position, stop moving
					.IF obsPos.X <= ax && rolePos.Y >= 13
 0000039E  EB 02				jmp END_PLAY
						
					.ENDIF
 000003A0  EB 88			jmp PLAY
 000003A2			END_PLAY:
 000003A2  B8 000001F4			mov  eax,500 ;delay 1 sec
 000003A7  E8 00000000 E	    call Delay
 000003AC  E8 00000000 E		call Clrscr
					INVOKE Sleep, 1000
 000003BB  66| C7 05			mov startPos.Y, 15 
	   0000001A R
	   000F
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Game Over"
 00000B8E		     1		.data		
 00000B8E 47 61 6D 65 20     1		??0001 BYTE "Game Over",0	
	   4F 76 65 72 00
 000003D5		     1		.code
 000003D5  52		     1		push	edx
 000003D6  BA 00000B8E R     1		mov	edx,OFFSET ??0001
 000003DB  E8 00000000 E     1		call	WriteString
 000003E0  5A		     1		pop	edx
 000003E1  66| FF 05			inc startPos.Y
	   0000001A R
					INVOKE Sleep, 1000
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Your score is "
 00000B98		     1		.data		
 00000B98 59 6F 75 72 20     1		??0002 BYTE "Your score is ",0	
	   73 63 6F 72 65
	   20 69 73 20 00
 00000403		     1		.code
 00000403  52		     1		push	edx
 00000404  BA 00000B98 R     1		mov	edx,OFFSET ??0002
 00000409  E8 00000000 E     1		call	WriteString
 0000040E  5A		     1		pop	edx
 0000040F  A1 0000016A R		mov eax, score
 00000414  E8 00000000 E		call WriteDec
					INVOKE Sleep, 1000
					;retry
 00000423  66| FF 05			inc startPos.Y
	   0000001A R
					INVOKE SetConsoleCursorPosition,  
						outHandle, 
						startPos
					mWrite "Press ""r"" to play again or ""Esc"" to leave"
 00000BA7		     1		.data		
 00000BA7 50 72 65 73 73     1		??0003 BYTE "Press ""r"" to play again or ""Esc"" to leave",0	
	   20 22 72 22 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 6F
	   72 20 22 45 73
	   63 22 20 74 6F
	   20 6C 65 61 76
	   65 00
 0000043B		     1		.code
 0000043B  52		     1		push	edx
 0000043C  BA 00000BA7 R     1		mov	edx,OFFSET ??0003
 00000441  E8 00000000 E     1		call	WriteString
 00000446  5A		     1		pop	edx
 00000447  E8 00000074			call fileWrite	;測試寫檔
 0000044C  E8 0000008D			call fileRead	;測試讀檔
 00000451			Readchar_again:
 00000451  E8 00000000 E		call Readchar
					.IF ax == 1372h || ax == 1352h;按r再玩一次
 00000462  E8 00000000 E			call Clrscr
 00000467  66| C7 05				mov obsPos.X, 110
	   00000010 R
	   006E
 00000470  E9 FFFFFBCD				jmp Start_again
					.ENDIF
					.IF ax == 011bh;按esc離開遊戲
 0000047B  EB 02				jmp EndMain
					.ENDIF
 0000047D  EB D2			jmp Readchar_again
					
 0000047F			EndMain:
					
					exit
 00000486			main ENDP

 00000486			fileOpen PROC
					;開寫檔，每次開會把之前的紀錄刪掉
					INVOKE CreateFile,
						ADDR filename, 
						GENERIC_WRITE OR GENERIC_READ, 
						DO_NOT_SHARE, 
						NULL,
						OPEN_EXISTING, 
						FILE_ATTRIBUTE_NORMAL, 
						0
 000004A2  A3 000001BF R		mov fileHandle,eax ; save file handle
					.IF eax == INVALID_HANDLE_VALUE
 000004AC  BA 000001A0 R			mov edx,OFFSET errMsg ; Display error message
 000004B1  E8 00000000 E			call WriteString
 000004B6  EB 01				jmp QuitNow
					.ENDIF
 000004B8  C3				ret
 000004B9			QuitNow:
					exit
 000004C0			fileOpen ENDP

 000004C0			fileWrite PROC
					;寫檔
					INVOKE WriteFile, ; write text to file
						fileHandle, ; file handle
						ADDR score, ; buffer pointer
						scoreSize, ; number of bytes to write
						ADDR bytesWritten, ; number of bytes written
						0 ; overlapped execution flag
 000004DD  C3				ret
 000004DE			fileWrite ENDP

 000004DE			fileRead PROC
					;指向文件開頭
					INVOKE SetFilePointer,
						fileHandle,0,0,FILE_BEGIN
					INVOKE ReadFile,
						fileHandle,		; handle to file
						ADDR HighestScore,			; ptr to buffer
						10,		; num bytes to read
						ADDR bytesRead,		; bytes actually read
						NULL			; NULL (0) for syn mode

 00000508  A1 0000017E R		mov  eax, HighestScore
 0000050D  E8 00000000 E	    call WriteDec
 00000512  C3				ret
 00000513			fileRead ENDP

 00000513			getScore PROC, 
					;用經過的milliseconds當作分數
					;讓數字從相同地方印出
					INVOKE SetConsoleCursorPosition, 
							outHandle, 
							curPos
					INVOKE GetTickCount ; get new tick count
 00000529  3B 05 00000162 R		cmp eax,startTime	; lower than starting one
 0000052F  72 35			jb errorTime
 00000531  2B 05 00000162 R		sub eax,startTime	; get elapsed milliseconds
					;除以1000讓數字變小
 00000537  BA 00000000			mov edx, 0h			
 0000053C  B9 000003E8			mov ecx, 03E8h
 00000541  F7 F1			div ecx
 00000543  E8 00000000 E		call WriteDec ; display it
 00000548  A3 0000016A R		mov score, eax
					;15秒增加速度，到330秒極限
 0000054D  BA 00000000			mov edx, 0h
 00000552  B9 0000000F			mov ecx, 0fh
 00000557  F7 F1			div ecx
					.IF edx == 0
 0000055D  83 2D 0000015E R			sub drawDelay, 1
	   01
					.ENDIF

 00000564  EB 0C			jmp quit
 00000566			errorTime:
					mWrite "Reach Highest Goal!"
 00000BD1		     1		.data		
 00000BD1 52 65 61 63 68     1		??0004 BYTE "Reach Highest Goal!",0	
	   20 48 69 67 68
	   65 73 74 20 47
	   6F 61 6C 21 00
 00000566		     1		.code
 00000566  52		     1		push	edx
 00000567  BA 00000BD1 R     1		mov	edx,OFFSET ??0004
 0000056C  E8 00000000 E     1		call	WriteString
 00000571  5A		     1		pop	edx
 00000572			quit:
 00000572  C3				ret
 00000573			getScore ENDP

 00000573			startScreen PROC
 00000573  66| 83 05			add rolePos.X, 17
	   00000008 R 11
 0000057B  66| 83 05			add rolePos.Y, 3
	   0000000A R 03
					; Set the role to (28, 19):
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 000005BD  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000005FE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000063F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000680  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000006C1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000702  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000743  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000784  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000007C5  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;畫出"Running"
					FORC num, <IJKLMNOP>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							75, 
							startPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							75, 
							startPos, 
							ADDR cellsWritten
						inc startPos.Y
					ENDM
 00000806  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000847  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000888  66| FF 05	     1			inc startPos.Y
	   0000001A R
 000008C9  66| FF 05	     1			inc startPos.Y
	   0000001A R
 0000090A  66| FF 05	     1			inc startPos.Y
	   0000001A R
 0000094B  66| FF 05	     1			inc startPos.Y
	   0000001A R
 0000098C  66| FF 05	     1			inc startPos.Y
	   0000001A R
 000009CD  66| FF 05	     1			inc startPos.Y
	   0000001A R
 000009D4  66| 83 05			add startPos.Y, 3
	   0000001A R 03
					;畫出"HOURSE"
					FORC num, <QRTUV>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							101, 
							startPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							101, 
							startPos, 
							ADDR cellsWritten
						inc startPos.Y
					ENDM
 00000A16  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000A57  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000A98  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000AD9  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000B1A  66| FF 05	     1			inc startPos.Y
	   0000001A R
 00000B21  66| 83 05			add startPos.Y, 4
	   0000001A R 04
 00000B29  66| 83 05			add startPos.X, 50
	   00000018 R 32
					INVOKE SetConsoleCursorPosition, 
						outHandle, 
						startPos
					mWrite "Press ""space"" to start"
 00000BE5		     1		.data		
 00000BE5 50 72 65 73 73     1		??0005 BYTE "Press ""space"" to start",0	
	   20 22 73 70 61
	   63 65 22 20 74
	   6F 20 73 74 61
	   72 74 00
 00000B42		     1		.code
 00000B42  52		     1		push	edx
 00000B43  BA 00000BE5 R     1		mov	edx,OFFSET ??0005
 00000B48  E8 00000000 E     1		call	WriteString
 00000B4D  5A		     1		pop	edx
 00000B4E			notSpace:
 00000B4E  E8 00000000 E		call Readchar
					.IF ax == 3920h
 00000B59  E8 00000000 E			call Clrscr	;clear screen
 00000B5E  EB 02				jmp startGame
					.ENDIF
 00000B60  EB EC			jmp notSpace
 00000B62			startGame:
 00000B62  C3				ret
 00000B63			startScreen ENDP

 00000B63			role_move1 PROC
				;切換馬腳的兩種動作的第一種
				;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00000B9D  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000BDE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000C1F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000C60  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000CA1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000CE2  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000D23  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000D64  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000DA5  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 00000DAC  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					FORC num, <1234DEFGH>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00000DEE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000E2F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000E70  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000EB1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000EF2  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000F33  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000F74  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000FB5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00000FF6  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00000FFD  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001005  C3				ret
 00001006			role_move1 ENDP

 00001006			role_move2 PROC
				;切換馬腳的兩種動作的第二種
				;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001040  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001081  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000010C2  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001103  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001144  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001185  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000011C6  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001207  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001248  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 0000124F  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09

					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001291  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000012D2  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001313  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001354  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001395  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000013D6  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001417  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001458  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001499  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 000014A0  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 000014A8  C3				ret
 000014A9			role_move2 ENDP

 000014A9			role_up PROC
				;向上7格
					;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 000014E3  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001524  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001565  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000015A6  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000015E7  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001628  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001669  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000016AA  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000016EB  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 000016F2  66| 83 2D			sub rolePos.Y, 15
	   0000000A R 0F
 000016FA  66| FF 0D			dec rolePos.Y
	   0000000A R

					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 0000173B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000177C  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000017BD  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000017FE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 0000183F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001880  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000018C1  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001902  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001943  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 0000194A  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001952  C3				ret
 00001953			role_up ENDP

 00001953			role_down PROC
				;向下一格
					;erase old position
					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 0000198D  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 000019CE  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001A0F  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001A50  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001A91  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001AD2  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001B13  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001B54  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001B95  66| FF 05	     1			inc rolePos.Y
	   0000000A R

					;draw a new one
 00001B9C  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001BA4  66| FF 05			inc rolePos.Y
	   0000000A R

					FORC num, <123456789>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute&num, 
							10, 
							rolePos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							10, 
							rolePos, 
							ADDR cellsWritten
						inc rolePos.Y
					ENDM
 00001BE5  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001C26  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001C67  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001CA8  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001CE9  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001D2A  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001D6B  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001DAC  66| FF 05	     1			inc rolePos.Y
	   0000000A R
 00001DED  66| FF 05	     1			inc rolePos.Y
	   0000000A R

 00001DF4  66| 83 2D			sub rolePos.Y, 9
	   0000000A R 09
 00001DFC  C3				ret
 00001DFD			role_down ENDP

 00001DFD			move_obstacle PROC
					;draw obstacle with color red
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y			;每次畫一列，往上畫
					ENDM
 00001E37  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
 00001E78  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
 00001EB9  66| FF 0D	     1			dec obsPos.Y			;每次畫一列，往上畫
	   00000012 R
					;back to previous position Y回到第一列，X倒退三行
 00001EC0  66| 83 05			add obsPos.X, 3
	   00000010 R 03
 00001EC8  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					;erase obstacle 
					FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y
					ENDM
 00001F0A  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 00001F4B  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 00001F8C  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
					;to the next position Y回到第一列，X前進六行
 00001F93  66| 83 2D			sub obsPos.X, 6
	   00000010 R 06
 00001F9B  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					;若障礙物到達末端，從頭開始
					.IF obsPos.X == 5
 00001FB1  66| 83 05				add obsPos.X, 3
	   00000010 R 03
						FORC num, <ABC>
						INVOKE WriteConsoleOutputAttribute, 
							outHandle, 
							ADDR attribute_black, 
							3, 
							obsPos, 
							ADDR cellsWritten
						INVOKE WriteConsoleOutputCharacter, 
							outHandle, 
							ADDR buffer, 
							3, 
							obsPos, 
							ADDR cellsWritten
						dec obsPos.Y
					ENDM
 00001FF3  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 00002034  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
 00002075  66| FF 0D	     1			dec obsPos.Y
	   00000012 R
					;生成隨機顏色
 0000207C  E8 00000000 E			call Randomize ;初始化
 00002081  E8 00000000 E			call Random32 ;生成隨機正整數到eax
 00002086  33 D2				xor edx, edx ;餘數歸零
 00002088  F7 35 0000017A R			div range ;0到7隨機數
 0000208E  66| 8B 04 55				mov ax, attribute0[edx*2] ; 根據隨機數選擇對應的顏色
	   000002FD R
						FORC num, <024>
							mov attribute[&num], ax ; 設定顏色
						ENDM
 00002096  66| A3	     1				mov attribute[0], ax ; 設定顏色
	   000002F7 R
 0000209C  66| A3	     1				mov attribute[2], ax ; 設定顏色
	   000002F9 R
 000020A2  66| A3	     1				mov attribute[4], ax ; 設定顏色
	   000002FB R
 000020A8  66| C7 05			mov obsPos.X, 110 
	   00000010 R
	   006E
 000020B1  66| 83 05			add obsPos.Y, 3
	   00000012 R 03
					.ENDIF
 000020B9  C3				ret
 000020BA			move_obstacle ENDP
				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/21/23 23:34:51
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000BFC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000020BA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileOpen . . . . . . . . . . . .	P Near	 00000486 _TEXT	Length= 0000003A Public STDCALL
  QuitNow  . . . . . . . . . . .	L Near	 000004B9 _TEXT	
fileRaed . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fileRead . . . . . . . . . . . .	P Near	 000004DE _TEXT	Length= 00000035 Public STDCALL
fileWrite  . . . . . . . . . . .	P Near	 000004C0 _TEXT	Length= 0000001E Public STDCALL
getScore . . . . . . . . . . . .	P Near	 00000513 _TEXT	Length= 00000060 Public STDCALL
  errorTime  . . . . . . . . . .	L Near	 00000566 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000572 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000486 Public STDCALL
  Start_again  . . . . . . . . .	L Near	 00000042 _TEXT	
  PLAY . . . . . . . . . . . . .	L Near	 0000032A _TEXT	
  spaceNotPressed  . . . . . . .	L Near	 00000342 _TEXT	
  END_PLAY . . . . . . . . . . .	L Near	 000003A2 _TEXT	
  Readchar_again . . . . . . . .	L Near	 00000451 _TEXT	
  EndMain  . . . . . . . . . . .	L Near	 0000047F _TEXT	
move_obstacle  . . . . . . . . .	P Near	 00001DFD _TEXT	Length= 000002BD Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
role_down  . . . . . . . . . . .	P Near	 00001953 _TEXT	Length= 000004AA Public STDCALL
role_move1 . . . . . . . . . . .	P Near	 00000B63 _TEXT	Length= 000004A3 Public STDCALL
role_move2 . . . . . . . . . . .	P Near	 00001006 _TEXT	Length= 000004A3 Public STDCALL
role_up  . . . . . . . . . . . .	P Near	 000014A9 _TEXT	Length= 000004AA Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
startScreen  . . . . . . . . . .	P Near	 00000573 _TEXT	Length= 000005F0 Public STDCALL
  notSpace . . . . . . . . . . .	L Near	 00000B4E _TEXT	
  startGame  . . . . . . . . . .	L Near	 00000B62 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000B87 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000B8E _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000B98 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000BA7 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000BD1 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000BE5 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Ground . . . . . . . . . . . . .	Number	 00000064h   
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HighestScore . . . . . . . . . .	DWord	 0000017E _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
attribute0 . . . . . . . . . . .	Word	 000002FD _DATA	
attribute1 . . . . . . . . . . .	Word	 000001CB _DATA	
attribute2 . . . . . . . . . . .	Word	 000001DF _DATA	
attribute3 . . . . . . . . . . .	Word	 000001F3 _DATA	
attribute4 . . . . . . . . . . .	Word	 00000207 _DATA	
attribute5 . . . . . . . . . . .	Word	 0000021B _DATA	
attribute6 . . . . . . . . . . .	Word	 0000022F _DATA	
attribute7 . . . . . . . . . . .	Word	 00000243 _DATA	
attribute8 . . . . . . . . . . .	Word	 00000257 _DATA	
attribute9 . . . . . . . . . . .	Word	 0000026B _DATA	
attributeD . . . . . . . . . . .	Word	 0000027F _DATA	
attributeE . . . . . . . . . . .	Word	 00000293 _DATA	
attributeF . . . . . . . . . . .	Word	 000002A7 _DATA	
attributeG . . . . . . . . . . .	Word	 000002BB _DATA	
attributeH . . . . . . . . . . .	Word	 000002CF _DATA	
attributeI . . . . . . . . . . .	Word	 0000030D _DATA	
attributeJ . . . . . . . . . . .	Word	 000003A1 _DATA	
attributeK . . . . . . . . . . .	Word	 0000042D _DATA	
attributeL . . . . . . . . . . .	Word	 000004BF _DATA	
attributeM . . . . . . . . . . .	Word	 00000555 _DATA	
attributeN . . . . . . . . . . .	Word	 000005E7 _DATA	
attributeO . . . . . . . . . . .	Word	 0000067D _DATA	
attributeP . . . . . . . . . . .	Word	 00000713 _DATA	
attributeQ . . . . . . . . . . .	Word	 000007A9 _DATA	
attributeR . . . . . . . . . . .	Word	 00000873 _DATA	
attributeT . . . . . . . . . . .	Word	 00000933 _DATA	
attributeU . . . . . . . . . . .	Word	 000009FD _DATA	
attributeV . . . . . . . . . . .	Word	 00000ABD _DATA	
attribute_black  . . . . . . . .	Word	 000002E3 _DATA	
attributes . . . . . . . . . . .	Word	 00000080 _DATA	
attribute  . . . . . . . . . . .	Word	 000002F7 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000001C _DATA	
bytesRead  . . . . . . . . . . .	DWord	 000001C7 _DATA	
bytesWritten . . . . . . . . . .	DWord	 000001C3 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000004 _DATA	
curInfo  . . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000172 _DATA	
curPos . . . . . . . . . . . . .	COORD	 00000166 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
drawDelay  . . . . . . . . . . .	DWord	 0000015E _DATA	
errMsg . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000001BF _DATA	
filename . . . . . . . . . . . .	Byte	 000001B5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
groundPos  . . . . . . . . . . .	COORD	 0000000C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineSize . . . . . . . . . . . .	DWord	 0000019C _DATA	
line . . . . . . . . . . . . . .	Byte	 0000019B _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
obsBound . . . . . . . . . . . .	COORD	 00000014 _DATA	
obsPos . . . . . . . . . . . . .	COORD	 00000010 _DATA	
outHandle  . . . . . . . . . . .	DWord	 00000000 _DATA	
range  . . . . . . . . . . . . .	DWord	 0000017A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rolePos  . . . . . . . . . . . .	COORD	 00000008 _DATA	
role_up_Y  . . . . . . . . . . .	Number	 00000010h   
scoreSize  . . . . . . . . . . .	DWord	 0000016E _DATA	
score  . . . . . . . . . . . . .	DWord	 0000016A _DATA	
startPos . . . . . . . . . . . .	COORD	 00000018 _DATA	
startTime  . . . . . . . . . . .	DWord	 00000162 _DATA	
testMsg  . . . . . . . . . . . .	Byte	 00000182 _DATA	
testSize . . . . . . . . . . . .	DWord	 00000197 _DATA	
titleStr . . . . . . . . . . . .	Byte	 0000014E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
